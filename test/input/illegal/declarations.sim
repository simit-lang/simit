%%% bad-set-type-1
element E
end

extern t : int;
extern V : set{E}(t);

%%% bad-set-type-2
element E
end

extern V : set{E};
extern U : set{E}(V*0);

%%% bad-grid-link-set-type-1
element E
end

extern Q : set{E};
extern P : set{E}(Q);
extern S : grid[1]{E}(P);

%%% bad-grid-link-set-type-2
element E
end

extern P : set{E};
extern S : grid[1]{E}(P);
extern T : grid[1]{E}(S);

%%% bad-tensor-type-1
element E
end

export func main()
  var t : tensor[E](int);
end

%%% bad-tensor-type-2
export func main()
  var t : tensor[2,2](int)';
end

%%% bad-tensor-type-3
func foo()
  var K : int;
  var v : vector[K](int);
end

%%% bad-tuple-type-1
func foo(a : (F * 2))
end

%%% bad-tuple-type-2
element F
end

func foo(a : (F * 0))
end

%%% redeclaration-1
element E
end

element E
end

%%% redeclaration-2
extern v : int;
extern v : int;

%%% redeclaration-3
export func main()
end

export func main()
end

%%% redeclaration-4
export func main()
  var v : int;
  var v : int;
end

%%% redeclaration-5
func foo<N,N>()
end

%%% redeclaration-6
func foo(a : int, inout a : float)
end

%%% redeclaration-7
func foo<N>(N : matrix[N,N](float))
end

func bar(M : matrix[5,5](float))
  foo(M);
end

%%% redeclaration-8
element E
  v : int;
  v : int;
end

%%% bad-decl-1
% NOTE: At some point we will want to implement constant folding and 
%       propagation in the compiler front end, which would handle this case.
%       This test should be removed at that point.
const x : int = 1 + 2;

%%% bad-decl-2
element E
end

func f(e : E)
  var f = e;
end

%%% bad-decl-3
func foo<1:N>()
end

%%% bad-decl-4
export func foo<N>()
end

%%% undeclared-var
export func main()
  z * z - 2;
end

%%% bad-init
export func main()
  var t : int = 1.0;
end

%%% bad-dense-tensor-1
export func main()
  t = [1, 2; 3];
end

%%% bad-dense-tensor-2
export func main()
  t = [[1, 2], [1, 2; 3, 4]];
end

%%% bad-dense-tensor-3
export func main()
  t = [0 1; 2.0 3.0];
end

