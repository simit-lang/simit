%%% bad-add-1
export func main()
  var t : tensor[2](int) = [1 2];
  var v : tensor[2](float) = [3.0 4.0];
  t + v;
end

%%% bad-add-2
export func main()
  true - false;
end

%%% bad-add-3
element E
end

extern S : set{E};

export func main()
  for i in S
    i + 1;
  end
end

%%% bad-add-4
func foo<N,M>(A : matrix[N,N](float), B : matrix[M,M](float))
  A + B;
end

%%% bad-mul-1
export func main()
  t = [1 2];
  t * t;
end

%%% bad-mul-2
export func main()
  N = [1 2; 3 4];
  M * N;
end

%%% bad-mul-3
export func main()
  N = [1 2; 3 4];
  t = [1 2 3]';
  N * t;
end

%%% bad-mul-4
export func main()
  N = [1 2; 3 4];
  t = [1 2 3];
  t * N;
end

%%% bad-mul-5
export func main()
  M = [[[1 2],[3 4]],[[5 6], [7 8]]];
  M * M;
end

%%% bad-mul-6
export func main()
  true * false;
end

%%% bad-mul-7
export func main()
  1.0 * 2;
end

%%% bad-mul-8
export func main()
  [1 2] * [1 2 3]';
end

%%% bad-mul-9
export func main()
  [1 2; 3 4] * [1 2];
end

%%% bad-mul-10
export func main()
  [1 2]' * [1 2; 3 4];
end

%%% bad-mul-11
export func main()
  v = [1 2]';
  (v + v) * [1 2; 3 4];
end

%%% bad-div-1
export func main()
  M = [[[1 2],[3 4]],[[5 6], [7 8]]];
  M / true;
end

%%% bad-div-2
export func main()
  M = [[[1 2],[3 4]],[[5 6], [7 8]]];
  M / 2.0;
end

%%% bad-solve-1
func foo()
  M = [1 2; 3 4];
  v = [1.0 2.0]';
  M \ v;
end

%%% bad-solve-2
func foo()
  M = [1 2; 3 4];
  v = [1 2 3]';
  M \ v;
end

%%% bad-solve-3
func foo()
  M = [1 2 3; 3 4 5];
  v = [1 2]';
  (M \ v) + v;
end

%%% bad-map-1
element E
end

extern V : set{E};
extern U : set{E}(V,V);

func f(v : E, u : (E * 1))
end

export func main()
  map f to U;
end

%%% bad-map-2
element E
end

extern V : set{E};
extern U : set{E}(V,V);

func g(u : (E * 2))
end

export func main()
  map g to U;
end

%%% bad-map-3
element E
end

extern V : set{E};
extern U : set{E}(V,V);

func h(f : float, v : E, u : (E * 2))
end

export func main()
  map h to U;
end

%%% bad-map-4
element E
end

extern V : set{E};
extern U : set{E}(V,V);

func h(f : float, v : E, u : (E * 2))
end

export func main()
  map h(1) to U;
end

%%% bad-map-5
func h(f : float)
end

export func main()
  t = 1.0;
  map h to t; 
end

%%% bad-map-6
element E
end

extern elems : set{E};

func foo(e : E, f : E)
end

export func main()
  for e in elems
    map foo(e) to elems;
  end
end

%%% bad-map-7
element E
end

extern A : set{E};
extern B : set{E};

func foo(e : E) -> (v : vector[A](float))
  v(e) = 1.0;
end

export func main()
  map foo to B;
end

%%% bad-map-8
element E
end

extern A : set{E};

export func main()
  map f to A;
end

%%% bad-map-9
element E
end

extern B : set{E}(A);

func f(a : E, b : (E*1))
end

export func main()
  map f to B;
end

%%% bad-map-10
element E
end

extern B : grid[2]{E}(A);

func f(a : E, b : grid[2]{E}(A))
end

export func main()
  map f to A through B;
end

%%% bad-and
export func main()
  1 and 2;
end

%%% bad-eq-1
export func main()
  s = [1 2];
  s == s;
end

%%% bad-eq-2
export func main()
  1 == 2 == 2.0;
end

%%% bad-not
export func main()
  not 1;
end

%%% bad-neg
export func main()
  -true;
end

